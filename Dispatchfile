#!starlark
# vi:syntax=python
location = "s3://integration-test-default/s3-artifacts"
resource("succeeded", type = "storage", params = {
    "type": "gcs",
    "location": location + "/succeeded",
    "dir": "yes"
}, secrets = {
    "BOTO_CONFIG": k8s.corev1.SecretKeySelector(key = "boto", localObjectReference = k8s.corev1.LocalObjectReference(name = "s3-config"))
})
task("succeeded-task", outputs = ["succeeded"], steps = [k8s.corev1.Container(
    name = "write-artifacts",
    image = "alpine",
    command = ["touch", "$(resources.outputs.succeeded.path)/file"]
)])
task("check", inputs = ["succeeded"], steps = [k8s.corev1.Container(
    name = "read-artifacts",
    image = "alpine",
    command = ["cat", "$(resources.inputs.succeeded.path)/file"]
)])
resource("failed", type = "storage", params = {
    "type": "gcs",
    "location": location + "/failed",
    "dir": "yes"
}, secrets = {
    "BOTO_CONFIG": k8s.corev1.SecretKeySelector(key = "boto", localObjectReference = k8s.corev1.LocalObjectReference(name = "s3-config"))
})
# We make "failed-task" depend on "check" to ensure that "check" is scheduled.
task("failed-task", outputs = ["failed"], deps = ["check"], steps = [k8s.corev1.Container(
    name = "write-artifacts",
    image = "alpine",
    command = ["touch", "$(resources.outputs.failed.path)/file"]
), k8s.corev1.Container(
    name = "fail",
    image = "alpine",
    command = ["false"]
)])
action(tasks = [ "succeeded-task", "check", "failed-task" ], on=pull_request(chatops=["build"]))
